# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

name: build_all_offline_apt_dnf_scheduled

on:
  push: {}
  workflow_dispatch: {}
  schedule:
    - cron: '0 * * * *'

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18599/w_BaseKit_p_2022.1.3.210_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18578/w_HPCKit_p_2022.1.3.145_offline.exe
  WINDOWS_IOTKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18530/w_IoTKit_p_2022.1.2.107_offline.exe
  WINDOWS_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18398/w_RenderKit_p_2022.1.0.88_offline.exe
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18487/l_BaseKit_p_2022.1.2.146_offline.sh
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18479/l_HPCKit_p_2022.1.2.117_offline.sh
  LINUX_IOTKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18477/l_IoTKit_p_2022.1.2.102_offline.sh
  LINUX_AIKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18486/l_AIKit_p_2022.1.2.135_offline.sh
  LINUX_DLFDKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18475/l_DLFDKit_p_2022.1.2.86_offline.sh
  LINUX_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18379/l_RenderKit_p_2022.1.0.74_offline.sh
  MACOS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18342/m_BaseKit_p_2022.1.0.92_offline.dmg
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18341/m_HPCKit_p_2022.1.0.86_offline.dmg
  MACOS_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18352/m_RenderKit_p_2022.1.0.85_offline.dmg
  LINUX_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic,intel-oneapi-compiler-fortran
  SAMPLES_TAG: 2022.1.0

jobs:
  build_windows_base_offline:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: tracert
      run: tracert -h 1 registrationcenter-download.intel.com
    - name: install_basekit
      run: scripts/install_windows.bat $WINDOWS_BASEKIT_URL intel.oneapi.win.dpcpp-compiler
    - name: build_dpc++
      run: scripts/build_windows.bat dpc++ "" $SAMPLES_TAG

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          extract.log
          bootstrapper*
          installer*
        retention-days: 7

  build_windows_hpc_iot_offline:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: tracert
      run: tracert -h 1 registrationcenter-download.intel.com
    - name: install_hpckit
      run: scripts/install_windows.bat $WINDOWS_HPCKIT_URL intel.oneapi.win.ifort-compiler
    - name: install_iotkit
      run: scripts/install_windows.bat $WINDOWS_IOTKIT_URL intel.oneapi.win.cpp-compiler
    - name: build_c++
      run: scripts/build_windows.bat c++ "" $SAMPLES_TAG
    - name: build_fortran
      run: scripts/build_windows.bat fortran "" $SAMPLES_TAG

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          extract.log
          bootstrapper*
          installer*
        retention-days: 7

  build_windows_render_offline:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: tracert
      run: tracert -h 1 registrationcenter-download.intel.com
    - name: install_renderkit
      run: scripts/install_windows.bat $WINDOWS_RENDERKIT_URL intel.oneapi.win.embree

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          extract.log
          bootstrapper*
          installer*
        retention-days: 7

  build_linux_all_offline:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: traceroute
      run: |
        sudo apt-get install -y traceroute
        sudo traceroute --tcp registrationcenter-download.intel.com
    - name: install_basekit
      run: scripts/install_linux.sh $LINUX_BASEKIT_URL intel.oneapi.lin.dpcpp-cpp-compiler
    - name: install_hpckit
      run: scripts/install_linux.sh $LINUX_HPCKIT_URL intel.oneapi.lin.ifort-compiler
    - name: install_iotkit
      run: scripts/install_linux.sh $LINUX_IOTKIT_URL intel.oneapi.lin.dpcpp-cpp-compiler-pro
    - name: build_c++
      run: scripts/build_linux.sh c++ $SAMPLES_TAG
    - name: build_fortran
      run: scripts/build_linux.sh fortran $SAMPLES_TAG
    - name: build_dpcpp
      run: scripts/build_linux.sh dpc++ $SAMPLES_TAG

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          bootstrapper*
          installer*
        retention-days: 7

  build_linux_all_offline_2:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: traceroute
      run: |
        sudo apt-get install -y traceroute
        sudo traceroute --tcp registrationcenter-download.intel.com
    - name: install_aikit
      run: scripts/install_linux.sh $LINUX_AIKIT_URL intel.oneapi.lin.tensorflow
    - name: install_dlfdkit
      run: scripts/install_linux.sh $LINUX_DLFDKIT_URL intel.oneapi.lin.ccl.devel
    - name: install_renderkit
      run: scripts/install_linux.sh $LINUX_RENDERKIT_URL intel.oneapi.lin.embree

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          bootstrapper*
          installer*
        retention-days: 7

  build_linux_apt:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: setup apt repo
      run: |
        sudo dpkg --add-architecture i386
        scripts/setup_apt_repo_linux.sh
        grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/*
    - name: print packages info
      run: sudo apt-cache show python3 python-jsonschema intel-oneapi-*
    - name: print info2
      run: sudo apt-cache depends intel-oneapi-runtime-libs
    - name: dry-run install oneapi
      run: sudo apt install --dry-run $(apt-cache search intel-oneapi | grep -v intelfpga | grep -v intel-oneapi-ilit | grep -v intel-oneapi-lpot | grep -v -- '-tail$' | awk '{print $1}')
    - name: dry-run install mpi
      run: sudo apt install --dry-run $(apt-cache search intel-mpi | grep -v intel-mpi-2019.0-045 | grep -v -- '-tail$' | awk '{print $1}')
    - name: install
      run: scripts/install_linux_apt.sh $LINUX_COMPONENTS
    - name: build
      run: scripts/build_linux.sh c++ $SAMPLES_TAG
    - name: build
      run: scripts/build_linux.sh fortran $SAMPLES_TAG
    - name: build
      run: scripts/build_linux.sh dpc++ $SAMPLES_TAG

  build_linux_apt_toolkits:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: setup apt repo
      run: scripts/setup_apt_repo_linux.sh
    - name: sudo apt update
      run: sudo apt update
    - name: print packages info
      run: sudo apt-cache show intel-oneapi-*
    - name: dry-run install basekit
      run: sudo apt install --dry-run intel-basekit
      if: ${{ always() }}
    - name: dry-run install hpckit
      run: sudo apt install --dry-run intel-hpckit
      if: ${{ always() }}
    - name: dry-run install iotkit
      run: sudo apt install --dry-run intel-iotkit
      if: ${{ always() }}
    - name: dry-run install aikit
      run: sudo apt install --dry-run intel-aikit
      if: ${{ always() }}
    - name: dry-run install dlfdkit
      run: sudo apt install --dry-run intel-dlfdkit
      if: ${{ always() }}
    - name: dry-run install renderkit
      run: sudo apt install --dry-run intel-renderkit
      if: ${{ always() }}
    # - name: dry-run install FPGA1
      # run: sudo apt install --dry-run intel-oneapi-intelfpgadpcpp-a10gx-s10sx
      # if: ${{ always() }}
    # - name: dry-run install FPGA2
      # run: sudo apt install --dry-run intel-oneapi-intelfpgadpcpp-a10gx-s10sx-quartus
      # if: ${{ always() }}
    - name: dry-run install FPGA3
      run: sudo apt install --dry-run intel-oneapi-intelfpgadpcpp-custom-platforms-quartus19.4
      if: ${{ always() }}
    - name: dry-run install FPGA4
      run: sudo apt install --dry-run intel-oneapi-intelfpgadpcpp-custom-platforms-quartus20.2
      if: ${{ always() }}
    - name: dry-run install FPGA5
      run: sudo apt install --dry-run intel-oneapi-intelfpgadpcpp-custom-platforms-quartus20.3
      if: ${{ always() }}
    - name: dry-run install FPGA6
      run: sudo apt install --dry-run intel-oneapi-intelfpgadpcpp-custom-platforms-quartus20.4
      if: ${{ always() }}
    - name: install
      run: scripts/install_linux_apt.sh $LINUX_COMPONENTS
    - name: build
      run: scripts/build_linux.sh c++ $SAMPLES_TAG
    - name: build
      run: scripts/build_linux.sh fortran $SAMPLES_TAG
    - name: build
      run: scripts/build_linux.sh dpc++ $SAMPLES_TAG

  build_linux_dnf:
    runs-on: ubuntu-20.04
    container: fedora
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: setup yum/dnf repo
      run: scripts/setup_yum_dnf_repo_linux.sh
    - name: install prerequisites
      run: sudo dnf -y install git make gcc g++
    - name: install
      run: scripts/install_linux_dnf.sh $LINUX_COMPONENTS
    - name: install mpi
      run: sudo dnf -y install intel-mpi
    - name: build
      run: scripts/build_linux.sh c++ $SAMPLES_TAG
    - name: build
      run: scripts/build_linux.sh fortran $SAMPLES_TAG
    - name: build
      run: scripts/build_linux.sh dpc++ $SAMPLES_TAG

  build_macos_all_offline:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: install_basekit
      run: scripts/install_macos.sh $MACOS_BASEKIT_URL
    - name: install_hpckit
      run: scripts/install_macos.sh $MACOS_HPCKIT_URL
    - name: install_renderkit
      run: scripts/install_macos.sh $MACOS_RENDERKIT_URL
    - name: build_c++
      run: scripts/build_macos.sh c++ $SAMPLES_TAG
    - name: build_fortran
      run: scripts/build_macos.sh fortran $SAMPLES_TAG

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          bootstrapper*
          installer*
        retention-days: 7
