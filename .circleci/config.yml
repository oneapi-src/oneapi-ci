# SPDX-FileCopyrightText: 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT

version: 2.1
parameters:
  WINDOWS_BASEKIT_URL:
    type: string
    default: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/c997c613-a165-48a0-aeb7-9932899c0cf1/w_BaseKit_p_2024.0.0.49557_offline.exe"
  WINDOWS_HPCKIT_URL:
    type: string
    default: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/23d88996-7eeb-414b-9da5-e33c5c285c6a/w_HPCKit_p_2024.0.0.49577_offline.exe"
  LINUX_BASEKIT_URL:
    type: string
    default: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/785409ee-4825-44b6-af24-ea8b5df4866b/l_BaseKit_p_2024.0.0.49556_offline.sh"
  LINUX_HPCKIT_URL:
    type: string
    default: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/c5cee152-b1b7-40b2-ac59-861c48f47b6c/l_HPCKit_p_2024.0.0.49582_offline.sh"
  WINDOWS_CPP_COMPONENTS:
    type: string
    default: "intel.oneapi.win.cpp-compiler"
  WINDOWS_FORTRAN_COMPONENTS:
    type: string
    default: "intel.oneapi.win.ifort-compiler"
  WINDOWS_DPCPP_COMPONENTS:
    type: string
    default: "intel.oneapi.win.dpcpp-compiler"
  LINUX_CPP_COMPONENTS:
    type: string
    default: "intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic"
  LINUX_FORTRAN_COMPONENTS:
    type: string
    default: "intel-oneapi-compiler-fortran"
  LINUX_DPCPP_COMPONENTS:
    type: string
    default: "intel-oneapi-compiler-dpcpp-cpp"
  LINUX_CPP_COMPONENTS_WEB:
    type: string
    default: "intel.oneapi.lin.dpcpp-cpp-compiler-pro"
  LINUX_FORTRAN_COMPONENTS_WEB:
    type: string
    default: "intel.oneapi.lin.ifort-compiler"
  LINUX_DPCPP_COMPONENTS_WEB:
    type: string
    default: "intel.oneapi.lin.dpcpp-cpp-compiler"
  SAMPLES_TAG:
    type: string
    default: "2024.0.0"
  COMPILER_VERSION:
    type: string
    default: "2024.0.0"
  TBB_VERSION:
    type: string
    default: "2021.11.0"
  VS_VER:
    type: string
    default: "vs2017"

orbs:
  win: circleci/windows@2.4.0

jobs:
  build_windows_cpp:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.WINDOWS_HPCKIT_URL >>-<< pipeline.parameters.WINDOWS_CPP_COMPONENTS >>-compiler-vcvarsall-{{ checksum "scripts/cache_exclude_windows.sh" }}
      - run:
          name: install
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/install_windows.bat << pipeline.parameters.WINDOWS_HPCKIT_URL >> << pipeline.parameters.WINDOWS_CPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_windows.bat c++ << pipeline.parameters.VS_VER >> << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: scripts/cache_exclude_windows.sh
      - save_cache:
          key: install-<< pipeline.parameters.WINDOWS_HPCKIT_URL >>-<< pipeline.parameters.WINDOWS_CPP_COMPONENTS >>-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
          paths:
            - C:\Program Files (x86)\Intel\oneAPI\compiler
            - C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_windows_fortran:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.WINDOWS_HPCKIT_URL >>-<< pipeline.parameters.WINDOWS_FORTRAN_COMPONENTS >>-compiler-vcvarsall-{{ checksum "scripts/cache_exclude_windows.sh" }}
      - run:
          name: install
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/install_windows.bat << pipeline.parameters.WINDOWS_HPCKIT_URL >> << pipeline.parameters.WINDOWS_FORTRAN_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_windows.bat fortran << pipeline.parameters.VS_VER >> << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: scripts/cache_exclude_windows.sh
      - save_cache:
          key: install-<< pipeline.parameters.WINDOWS_HPCKIT_URL >>-<< pipeline.parameters.WINDOWS_FORTRAN_COMPONENTS >>-compiler-{{ checksum "scripts/cache_exclude_windows.sh" }}
          paths:
            - C:\Program Files (x86)\Intel\oneAPI\compiler
            - C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_windows_dpcpp:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.WINDOWS_BASEKIT_URL >>-<< pipeline.parameters.WINDOWS_DPCPP_COMPONENTS >>-compiler-tbb-opencl-vcvarsall-{{ checksum "scripts/cache_exclude_windows.sh" }}
      - run:
          name: restory registry on cache hit
          command: |
            [ ! -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/restore_registry.bat << pipeline.parameters.COMPILER_VERSION >> << pipeline.parameters.TBB_VERSION >>
      - run:
          name: install
          command: |
            [ -d "C:\Program Files (x86)\Intel\oneAPI\compiler" ] && exit 0
            scripts/install_windows.bat << pipeline.parameters.WINDOWS_BASEKIT_URL >> << pipeline.parameters.WINDOWS_DPCPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_windows.bat dpc++ << pipeline.parameters.VS_VER >> << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: scripts/cache_exclude_windows.sh
      - save_cache:
          key: install-<< pipeline.parameters.WINDOWS_BASEKIT_URL >>-<< pipeline.parameters.WINDOWS_DPCPP_COMPONENTS >>-compiler-tbb-opencl-{{ checksum "scripts/cache_exclude_windows.sh" }}
          paths:
            - C:\Program Files (x86)\Intel\oneAPI\compiler
            - C:\Program Files (x86)\Intel\oneAPI\tbb
            - C:\Windows\System32\OpenCL.dll
            - C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_cpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_no_sudo.sh
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_CPP_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_no_sudo.sh << pipeline.parameters.LINUX_HPCKIT_URL >> << pipeline.parameters.LINUX_CPP_COMPONENTS_WEB >>
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_CPP_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_fortran:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_no_sudo.sh
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_no_sudo.sh << pipeline.parameters.LINUX_HPCKIT_URL >> << pipeline.parameters.LINUX_FORTRAN_COMPONENTS_WEB >>
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_dpcpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_no_sudo.sh
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_BASEKIT_URL >>-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_no_sudo.sh << pipeline.parameters.LINUX_BASEKIT_URL >> << pipeline.parameters.LINUX_DPCPP_COMPONENTS_WEB >>
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_BASEKIT_URL >>-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS_WEB >>-compiler-tbb-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler
            - /opt/intel/oneapi/tbb

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_apt_cpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_apt_fortran:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_apt_dpcpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-tbb-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler
            - /opt/intel/oneapi/tbb

  build_linux_dnf_cpp:
    docker:
      - image: fedora:37
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_dnf_no_sudo.sh
      - run:
          name: setup yum/dnf repo
          command: . scripts/setup_yum_dnf_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of dnf packages
          command: . scripts/dnf_depends.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_dnf_no_sudo.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_dnf_fortran:
    docker:
      - image: fedora:37
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_dnf_no_sudo.sh
      - run:
          name: setup yum/dnf repo
          command: . scripts/setup_yum_dnf_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of dnf packages
          command: . scripts/dnf_depends.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_dnf_no_sudo.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_dnf_dpcpp:
    docker:
      - image: fedora:37
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_dnf_no_sudo.sh
      - run:
          name: setup yum/dnf repo
          command: . scripts/setup_yum_dnf_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of dnf packages
          command: . scripts/dnf_depends.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_dnf_no_sudo.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-tbb-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler
            - /opt/intel/oneapi/tbb

  build_linux_container_cpp:
    docker:
      - image: intel/oneapi-hpckit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>

  build_linux_container_fortran:
    docker:
      - image: intel/oneapi-hpckit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>

  build_linux_container_dpcpp:
    docker:
      - image: intel/oneapi-basekit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git cmake
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>

workflows:
  build-all:
    jobs:
    - build_windows_cpp
    - build_windows_fortran
    - build_windows_dpcpp
    - build_linux_cpp
    - build_linux_fortran
    - build_linux_dpcpp
    - build_linux_apt_cpp
    - build_linux_apt_fortran
    - build_linux_apt_dpcpp
    - build_linux_dnf_cpp
    - build_linux_dnf_fortran
    - build_linux_dnf_dpcpp
    - build_linux_container_cpp
    - build_linux_container_fortran
    - build_linux_container_dpcpp
