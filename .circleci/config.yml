# SPDX-FileCopyrightText: 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT

version: 2.1
parameters:
  LINUX_BASEKIT_URL:
    type: string
    default: "https://registrationcenter-download.intel.com/akdlm/irc_nas/18673/l_BaseKit_p_2022.2.0.262_offline.sh"
  LINUX_HPCKIT_URL:
    type: string
    default: "https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191_offline.sh"
  LINUX_CPP_COMPONENTS:
    type: string
    default: "intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic"
  LINUX_FORTRAN_COMPONENTS:
    type: string
    default: "intel-oneapi-compiler-fortran"
  LINUX_DPCPP_COMPONENTS:
    type: string
    default: "intel-oneapi-compiler-dpcpp-cpp"
  LINUX_CPP_COMPONENTS_WEB:
    type: string
    default: "intel.oneapi.lin.dpcpp-cpp-compiler-pro"
  LINUX_FORTRAN_COMPONENTS_WEB:
    type: string
    default: "intel.oneapi.lin.ifort-compiler"
  LINUX_DPCPP_COMPONENTS_WEB:
    type: string
    default: "intel.oneapi.lin.dpcpp-cpp-compiler"
  SAMPLES_TAG:
    type: string
    default: "2022.2.0"
  COMPILER_VERSION:
    type: string
    default: "2022.1.0"

jobs:
  build_linux_cpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_no_sudo.sh
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_CPP_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_no_sudo.sh << pipeline.parameters.LINUX_HPCKIT_URL >> << pipeline.parameters.LINUX_CPP_COMPONENTS_WEB >>
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_CPP_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_fortran:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_no_sudo.sh
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_no_sudo.sh << pipeline.parameters.LINUX_HPCKIT_URL >> << pipeline.parameters.LINUX_FORTRAN_COMPONENTS_WEB >>
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_HPCKIT_URL >>-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_dpcpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_no_sudo.sh
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_BASEKIT_URL >>-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS_WEB >>-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_no_sudo.sh << pipeline.parameters.LINUX_BASEKIT_URL >> << pipeline.parameters.LINUX_DPCPP_COMPONENTS_WEB >>
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_BASEKIT_URL >>-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS_WEB >>-compiler-tbb-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler
            - /opt/intel/oneapi/tbb

      # Delete the following if you don't want to save install logs
      - run:
          command: |
            mkdir InstallLogs
            cp extract* bootstrapper* installer* InstallLogs || :
          when: always
      - store_artifacts:
          path: InstallLogs

  build_linux_apt_cpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_apt_fortran:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_apt_dpcpp:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_apt_no_sudo.sh
      - run:
          name: setup apt repo
          command: . scripts/setup_apt_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of apt packages
          command: . scripts/apt_depends.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_apt_no_sudo.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-tbb-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler
            - /opt/intel/oneapi/tbb

  build_linux_dnf_cpp:
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_dnf_no_sudo.sh
      - run:
          name: setup yum/dnf repo
          command: . scripts/setup_yum_dnf_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of dnf packages
          command: . scripts/dnf_depends.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_dnf_no_sudo.sh << pipeline.parameters.LINUX_CPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_CPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_dnf_fortran:
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_dnf_no_sudo.sh
      - run:
          name: setup yum/dnf repo
          command: . scripts/setup_yum_dnf_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of dnf packages
          command: . scripts/dnf_depends.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_dnf_no_sudo.sh << pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_FORTRAN_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler

  build_linux_dnf_dpcpp:
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - run:
          name: install prerequisites
          command: . scripts/install_prerequisites_linux_dnf_no_sudo.sh
      - run:
          name: setup yum/dnf repo
          command: . scripts/setup_yum_dnf_repo_linux_no_sudo.sh
      - run:
          name: collect versioned dependencies of dnf packages
          command: . scripts/dnf_depends.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >> | tee depends.txt
      - restore_cache:
          keys:
            - install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
      - run:
          name: install
          command: |
           [ -d /opt/intel/oneapi/compiler ] && exit 0
           . scripts/install_linux_dnf_no_sudo.sh << pipeline.parameters.LINUX_DPCPP_COMPONENTS >>
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>
      - run:
          name: exclude unused files from cache
          command: . scripts/cache_exclude_linux_no_sudo.sh
      - save_cache:
          key: install-<< pipeline.parameters.LINUX_DPCPP_COMPONENTS >>-{{ checksum "depends.txt" }}-compiler-tbb-${{ checksum "scripts/cache_exclude_linux_no_sudo.sh" }}
          paths:
            - /opt/intel/oneapi/compiler
            - /opt/intel/oneapi/tbb

  build_linux_container_cpp:
    docker:
      - image: intel/oneapi-hpckit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh c++ << pipeline.parameters.SAMPLES_TAG >>

  build_linux_container_fortran:
    docker:
      - image: intel/oneapi-hpckit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh fortran << pipeline.parameters.SAMPLES_TAG >>

  build_linux_container_dpcpp:
    docker:
      - image: intel/oneapi-basekit
    steps:
      - run:
          name: install_git
          command: apt update && apt install -y git
      - checkout
      - run:
          name: build
          command: scripts/build_linux.sh dpc++ << pipeline.parameters.SAMPLES_TAG >>

workflows:
  build-all:
    jobs:
    - build_linux_cpp
    - build_linux_fortran
    - build_linux_dpcpp
    - build_linux_apt_cpp
    - build_linux_apt_fortran
    - build_linux_apt_dpcpp
    - build_linux_dnf_cpp
    - build_linux_dnf_fortran
    - build_linux_dnf_dpcpp
    - build_linux_container_cpp
    - build_linux_container_fortran
    - build_linux_container_dpcpp
