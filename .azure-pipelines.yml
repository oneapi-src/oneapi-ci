# SPDX-FileCopyrightText: 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT

trigger:
- master

variables:
  - name: WINDOWS_BASEKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/d91caaa0-7306-46ea-a519-79a0423e1903/w_BaseKit_p_2024.2.1.101_offline.exe
  - name: WINDOWS_HPCKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/745e923a-3f85-4e1e-b6dd-637c0e9ccba6/w_HPCKit_p_2024.2.1.80_offline.exe
  - name: LINUX_BASEKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/e6ff8e9c-ee28-47fb-abd7-5c524c983e1c/l_BaseKit_p_2024.2.1.100_offline.sh
  - name: LINUX_HPCKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/d461a695-6481-426f-a22f-b5644cd1fa8b/l_HPCKit_p_2024.2.1.79_offline.sh
  - name: WINDOWS_CPP_COMPONENTS
    value: intel.oneapi.win.cpp-dpcpp-common
  - name: WINDOWS_FORTRAN_COMPONENTS
    value: intel.oneapi.win.ifort-compiler
  - name: WINDOWS_DPCPP_COMPONENTS
    value: intel.oneapi.win.cpp-dpcpp-common
  - name: LINUX_CPP_COMPONENTS
    value: intel-oneapi-dpcpp-cpp-compiler
  - name: LINUX_FORTRAN_COMPONENTS
    value: intel-oneapi-compiler-fortran
  - name: LINUX_DPCPP_COMPONENTS
    value: intel-oneapi-compiler-dpcpp-cpp
  - name: LINUX_CPP_COMPONENTS_WEB
    value: intel.oneapi.lin.dpcpp-cpp-compiler
  - name: LINUX_FORTRAN_COMPONENTS_WEB
    value: intel.oneapi.lin.ifort-compiler
  - name: LINUX_DPCPP_COMPONENTS_WEB
    value: intel.oneapi.lin.dpcpp-cpp-compiler
  - name: SAMPLES_TAG
    value: 2024.2.0
  - name: COMPILER_VERSION
    value: 2024.2.1
  - name: TBB_VERSION
    value: 2021.13.1
  - name: VS_VER
    value: vs2022

resources:
    containers:
      - container: oneapi-hpckit
        image: intel/oneapi-hpckit:latest
        options: '-v /usr/bin/sudo:/usr/bin/sudo -v /usr/lib/sudo/libsudo_util.so.0:/usr/lib/sudo/libsudo_util.so.0 -v /usr/lib/sudo/sudoers.so:/usr/lib/sudo/sudoers.so'
      - container: oneapi-basekit
        image: intel/oneapi-basekit:latest
        options: '-v /usr/bin/sudo:/usr/bin/sudo -v /usr/lib/sudo/libsudo_util.so.0:/usr/lib/sudo/libsudo_util.so.0 -v /usr/lib/sudo/sudoers.so:/usr/lib/sudo/sudoers.so'

jobs:
- job: build_windows_cpp
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Cache@2 # multiple paths per cache not supported yet. See https://github.com/microsoft/azure-pipelines-agent/pull/2834
    inputs:
      path: vcvarsall
      key: '"install" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_CPP_COMPONENTS)" | "vcvarsall" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - task: Cache@2
    condition: eq(variables.CACHE_RESTORED, 'true')
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\compiler
      key: '"install" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_CPP_COMPONENTS)" | "compiler" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_windows.bat $(WINDOWS_HPCKIT_URL) $(WINDOWS_CPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - bash: cp vcvarsall/setvars-vcvarsall.bat "C:/Program Files (x86)/Intel/oneAPI/"
    displayName: restore setvars-vcvarsall.bat from cache
    condition: eq(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_windows.bat c++ $(VS_VER) $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_windows.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')
  - bash: |
      mkdir -p vcvarsall
      cp "C:/Program Files (x86)/Intel/oneAPI/setvars-vcvarsall.bat" vcvarsall/
    displayName: copy setvars-vcvarsall.bat to a folder for caching
    condition: ne(variables.CACHE_RESTORED, 'true')

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_windows_fortran
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Cache@2 # multiple paths per cache not supported yet. See https://github.com/microsoft/azure-pipelines-agent/pull/2834
    inputs:
      path: vcvarsall
      key: '"install" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_FORTRAN_COMPONENTS)" | "vcvarsall" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - task: Cache@2
    condition: eq(variables.CACHE_RESTORED, 'true')
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\compiler
      key: '"install" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_FORTRAN_COMPONENTS)" | "compiler" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_windows.bat $(WINDOWS_HPCKIT_URL) $(WINDOWS_FORTRAN_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - bash: cp vcvarsall/setvars-vcvarsall.bat "C:/Program Files (x86)/Intel/oneAPI/"
    displayName: restore setvars-vcvarsall.bat from cache
    condition: eq(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_windows.bat fortran $(VS_VER) $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_windows.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')
  - bash: |
      mkdir -p vcvarsall
      cp "C:/Program Files (x86)/Intel/oneAPI/setvars-vcvarsall.bat" vcvarsall/
    displayName: copy setvars-vcvarsall.bat to a folder for caching
    condition: ne(variables.CACHE_RESTORED, 'true')

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_windows_dpcpp
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: Cache@2 # multiple paths per cache not supported yet. See https://github.com/microsoft/azure-pipelines-agent/pull/2834
    inputs:
      path: vcvarsall
      key: '"install" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "vcvarsall" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - task: Cache@2
    condition: eq(variables.CACHE_RESTORED, 'true')
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\compiler
      key: '"install" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "compiler" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - task: Cache@2
    condition: eq(variables.CACHE_RESTORED, 'true')
    inputs:
      path: C:\Program Files (x86)\Intel\oneAPI\tbb
      key: '"install" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "tbb" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - task: Cache@2
    condition: eq(variables.CACHE_RESTORED, 'true')
    inputs:
      path: opencl # caching of individual files is not supported, caching OpenCL.dll in a folder as a workaround.
      key: '"install" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_DPCPP_COMPONENTS)" | "opencl_folder" | scripts/cache_exclude_windows.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_windows.bat $(WINDOWS_BASEKIT_URL) $(WINDOWS_DPCPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/restore_registry.bat $(COMPILER_VERSION) $(TBB_VERSION)
    displayName: restory registry on cache hit
    condition: eq(variables.CACHE_RESTORED, 'true')
  - bash: cp vcvarsall/setvars-vcvarsall.bat "C:/Program Files (x86)/Intel/oneAPI/"
    displayName: restore setvars-vcvarsall.bat from cache
    condition: eq(variables.CACHE_RESTORED, 'true')
  - bash: cp opencl/OpenCL.dll C:/Windows/System32/
    displayName: restore OpenCL.dll from cache
    condition: eq(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_windows.bat dpc++ $(VS_VER) $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_windows.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')
  - bash: |
      mkdir -p vcvarsall
      cp "C:/Program Files (x86)/Intel/oneAPI/setvars-vcvarsall.bat" vcvarsall/
    displayName: copy setvars-vcvarsall.bat to a folder for caching
    condition: ne(variables.CACHE_RESTORED, 'true')
  - bash: |
      mkdir -p opencl
      cp C:/Windows/System32/OpenCL.dll opencl/
    displayName: copy OpenCL.dll to a folder for caching
    condition: ne(variables.CACHE_RESTORED, 'true')

  # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_linux_cpp
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"install" | "$(LINUX_HPCKIT_URL)" | "$(LINUX_CPP_COMPONENTS_WEB)" | "compiler" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux.sh $(LINUX_HPCKIT_URL) $(LINUX_CPP_COMPONENTS_WEB)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh c++ $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

    # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_linux_fortran
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"install" | "$(LINUX_HPCKIT_URL)" | "$(LINUX_FORTRAN_COMPONENTS_WEB)" | "compiler" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux.sh $(LINUX_HPCKIT_URL) $(LINUX_FORTRAN_COMPONENTS_WEB)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh fortran $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

    # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_linux_dpcpp
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"install" | "$(LINUX_BASEKIT_URL)" | "$(LINUX_DPCPP_COMPONENTS_WEB)" | "compiler" | scripts/cache_exclude_linux.sh'
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/tbb
      key: '"install" | "$(LINUX_BASEKIT_URL)" | "$(LINUX_DPCPP_COMPONENTS_WEB)" | "tbb" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux.sh $(LINUX_BASEKIT_URL) $(LINUX_DPCPP_COMPONENTS_WEB)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh dpc++ $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

    # Delete the following if you don't want to save install logs
  - task: CopyFiles@2
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        extract.log
        bootstrapper*
        installer*
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: InstallLogs_$(Agent.JobName)

- job: build_linux_apt_cpp
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - script: scripts/setup_apt_repo_linux.sh
    displayName: setup apt repo
  - script: scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
    displayName: collect versioned dependencies of apt packages
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"install" | "$(LINUX_CPP_COMPONENTS)" | depends.txt | "compiler" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux_apt.sh $(LINUX_CPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh c++ $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

- job: build_linux_apt_fortran
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - script: scripts/setup_apt_repo_linux.sh
    displayName: setup apt repo
  - script: scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
    displayName: collect versioned dependencies of apt packages
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"install" | "$(LINUX_FORTRAN_COMPONENTS)" | depends.txt | "compiler" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux_apt.sh $(LINUX_FORTRAN_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh fortran $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')

- job: build_linux_apt_dpcpp
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - script: scripts/setup_apt_repo_linux.sh
    displayName: setup apt repo
  - script: scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
    displayName: collect versioned dependencies of apt packages
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/compiler
      key: '"install" | "$(LINUX_DPCPP_COMPONENTS)" | depends.txt | "compiler" | scripts/cache_exclude_linux.sh'
  - task: Cache@2
    inputs:
      path: /opt/intel/oneapi/tbb
      key: '"install" | "$(LINUX_DPCPP_COMPONENTS)" | depends.txt | "tbb" | scripts/cache_exclude_linux.sh'
      cacheHitVar: CACHE_RESTORED
  - script: scripts/install_linux_apt.sh $(LINUX_DPCPP_COMPONENTS)
    displayName: install
    condition: ne(variables.CACHE_RESTORED, 'true')
  - script: scripts/build_linux.sh dpc++ $(SAMPLES_TAG)
    displayName: build
  - bash: scripts/cache_exclude_linux.sh
    displayName: exclude unused files from cache
    condition: ne(variables.CACHE_RESTORED, 'true')
